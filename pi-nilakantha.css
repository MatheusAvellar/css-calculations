/* Pi in CSS+HTML
 * by Matheus Avellar
 * 2021-01-05
 *
 * With thanks to loxaxs for
 * Nilakantha's Series formula
 * (math.stackexchange.com/a/1834549)
 */

#pi-nilakantha {
  --n1: 0;
  --n2: 0;
  --res1: 0;
  --res2: 0;
}
#pi-nilakantha div.a {
  /* Formula is basically
   *   1 / [n*(2n+1)*(n+1)]
   */
  --n1: calc(var(--n2) + 1.0);

  --a: calc(2.0 * var(--n1) + 1.0);
  --b: calc(var(--n1) + 1.0);

  --den: calc(var(--n1) * var(--a) * var(--b));
  /* Odd is positive */
  --res: calc(1.0 / var(--den));
  --res1: calc(var(--res) + var(--res2));
}
#pi-nilakantha div.b {
  --n2: calc(var(--n1) + 1.0);

  --a: calc(2.0 * var(--n2) + 1.0);
  --b: calc(var(--n2) + 1.0);

  --den: calc(var(--n2) * var(--a) * var(--b));
  /* Even is negative */
  --res: calc(-1.0 / var(--den));
  --res2: calc(var(--res) + var(--res1));
}

#pi-nilakantha div.a::before {
  /* Here we multiply everything by a gajillion because CSS counters don't
   * work with decimals; then we add the final 3 (gajillions) as the series
   * only calculates the decimal part
   */
  counter-reset: value calc(100000000 * var(--res1) + 300000000);
  content: "Iteration #" counter(iterations) ": " counter(value);
}
#pi-nilakantha div.b::before {
  counter-reset: value calc(100000000 * var(--res2) + 300000000);
  content: "Iteration #" counter(iterations) ": " counter(value);
}